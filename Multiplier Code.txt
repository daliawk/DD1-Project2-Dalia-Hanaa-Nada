module Multiplier(
    input clk, 
input en,
input rst,
input [7:0] A,
input [7:0] B,
output [15:0] P,
output reg [15:0] A_comp=0,
output reg [7:0] B_comp=0,
output reg [15:0] P_temp=0
);

//reg [15:0] A_comp=0;
//reg [7:0] B_comp=0;

//Complement ac (A, A[7], A_comp);
//Complement bc (B, B[7], B_comp);

//wire [15:0] A_16= {8'b00000000, A_comp};
//reg [15:0] P_temp=0;
 reg EA=0;
 
 reg EP=0;

  always@(posedge clk) begin
      if(rst) begin
           P_temp=0;
           A_comp=0;
           B_comp=0;
           EA=0;
           EP=0;
      end
      
      else if(en) begin
       A_comp= (A[7])? { 8'b00000000, ~A + 8'b00000001}: A;
       B_comp= (B[7])? ~B + 8'b00000001: B;
       EA=1;
      end
      else if(B_comp != 0 && EA) begin
           if(B_comp[0] == 1) begin
                 P_temp = P_temp + A_comp;
           end
      
        B_comp=B_comp >> 1;
        A_comp= A_comp <<1;
        
        end
        else if (B_comp == 0 && EA) begin
        //EA= 1'b0;
        EP= 1'b1;
        end

end

//assign en= !EA;
//Complement pc(P_temp, A[7]^B[7], P);
assign P= (~EP | rst)? 0 :
           (A[7]^B[7])? ~P_temp + 8'b00000001: P_temp; 


endmodule


module Multiplier_Sim(
    );
    reg clk, en, rst;
    reg [7:0] A, B;
    wire [15:0] P;
    wire [15:0] A_comp;
    wire [7:0] B_comp;
    wire [15:0] P_temp;
    
    Multiplier m (.clk(clk), .en(en), .rst(rst), .A(A), .B(B), .P(P), .A_comp(A_comp), .B_comp(B_comp), .P_temp(P_temp));
    
    initial begin
    clk=0;
    forever #20 clk=~clk;
    end
    
    initial begin
     A= 8'b00000011; B= 8'b00000010; en=1; rst=0;
       #60
       A= 8'b00000011 ; B= 8'b00000010; en=0; rst=0;
       #200
    
            A= 8'b00000011; B= 8'b00000010; en=0; rst=1;
              #40
    A= 8'b11111100; B= 8'b00000010; en=1; rst=0;
    #60
    A= 8'b11111100; B= 8'b00000010; en=0; rst=0;
    #200
     A= 8'b00000011; B= 8'b00000010; en=0; rst=1;
       #40
    A= 8'b11111100; B= 8'b11111110; en=1; rst=0;
   #40
    A= 8'b11111100; B= 8'b11111110; en=0; rst=0;
        
    end
    
endmodule